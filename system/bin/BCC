#!/system/bin/sh

#################################################################################
# nome	 : Battery Charge Control												#
# autore : N1m0Y and @veez21													#
# anno   : 2017-2018															#
# licenza: questo script è software libero: puoi ridistribuirlo e/o modificarlo	#
#          rispettando i termini della licenza GNU General Public licenses		#
#          stabiliti dalla Free Software Foundation, versione 3.				#
#          Questo script è distribuito nella speranza che possa essere utile,	#
#          ma SENZA ALCUNA GARANZIA.											#
#          Consulta la licenza GNU General Public License per avere ulteriori	#
#          dettagli <http://www.gnu.org/licenses/>. 							#
# Credits: @@@@@																#
#################################################################################

#Global variables
QC=/sys/class/power_supply/battery/le_quick_charge_mode
VC=/sys/class/power_supply/battery/voltage_max
DESIGN=/sys/class/power_supply/battery/voltage_max_design
Status=/sys/class/power_supply/battery/status
Temp=/sys/class/power_supply/battery/temp
Technology=/sys/class/power_supply/battery/technology
Health=/sys/class/power_supply/battery/health
BCE=/sys/class/power_supply/battery/battery_charging_enabled
CE=/sys/class/power_supply/battery/charging_enabled
LF=1
MV=1
AV=0

#Internal variables
busybox=/dev/busybox

#Detect variables
UNSUPPORTED=false
[ ! -f $QC ] && [ ! -f $VC ] && UNSUPPORTED=true

# Colors
G='\e[01;32m'
R='\e[01;31m'
N='\e[00;37;40m'
Y='\e[01;33m'
B='\e[01;34m'
V='\e[01;35m'
Bl='\e[01;30m'
C='\e[01;36m'
W='\e[01;37m'

#Functions
convert(){
	#Convert to decimal value
	if [ $1 -lt 10000 ]; then
		x=$($busybox/awk "BEGIN {printf \"%.2f\n\", $1/1000}")
	elif [ $1 -gt 10000 ]; then
		x=$($busybox/awk "BEGIN {printf \"%.2f\n\", $1/1000000}")
	fi
	val=$x
}

wait_for(){
	i=1
	while [ $i -lt $(($1+1)) ]; do
		clear;
		echo "|"
		sleep 0.20
		clear;
		echo "/"
		sleep 0.20
		clear;
		echo "-"
		sleep 0.20
		clear;
		echo '\'
		sleep 0.20
		clear;
		echo "$i"
		sleep 0.20
		i=$(($i+1))
	done
}

logcat(){
	if [ $LF -eq 1 ]; then
		echo $1 | tee -a $LOG_FILE;
	fi
}

# Log file #
LOG_FILE=/sdcard/BCC.log;
Log_old=/sdcard/BCC.old;
if [ -e "$Log_old" ]; then
	rm $Log_old;
fi;
if [ -e "$LOG_FILE" ]; then
	mv $LOG_FILE $Log_old;
	rm $LOG_FILE;
fi;
wait_for 2

logcat "Starting BCC.log $( date +"%d-%m-%Y %H:%M:%S" )"
echo "Ok lets start working";
sleep 2

#Begin
while true; do
	clear;
	echo -e "${G}Battery Charge Control${N}"
	echo ""
	if $UNSUPPORTED; then
		echo "Your device is unsupported!"
		echo "You can try changing your kernel/ROM\nthat has the necessary files to be supported."
		sleep 2
		exit 1
	fi
	if [ -f $Status ]; then
		echo -e "${W}Status: $(cat $Status)${N}"
	fi
	if [ -f $Health ]; then
		echo -e "${W}Health: $(cat $Health)${N}"
	fi
	if [ -f $Technology ]; then
		echo -e "${W}Technology: $(cat $Technology)${N}"
	fi
	echo ""
	echo ""
	if [ -f $QC ]; then
		if [ $(cat $QC) -eq 1 ]; then
			echo -e "${G}Q)${N} ${W}QuickCharge enable/disable${N}"
		elif [ $(cat $QC) -eq 0 ]; then
			echo -e "${R}Q)${N} ${W}QuickCharge enable/disable${N}"
		fi
	fi
	if [ -f $VC ]; then
		if [ $AV -eq 1 ] && [ $MV -eq 0 ]; then
			echo -e "${R}M)${N} ${W}Manual charging voltage${N}"
			echo -e "${G}A)${N} ${W}Automatic charging voltage${N}"
		elif [ $AV -eq 0 ] && [ $MV -eq 1 ]; then
			echo -e "${G}M)${N} ${W}Manual charging voltage${N}"
			echo -e "${R}A)${N} ${W}Automatic charging voltage${N}"
		fi
	fi
	if [ -f $LOG_FILE ]; then
		if [ $LF -eq 1 ]; then
			echo -e "${G}L)${N} ${W}Logcat enabled/disabled${N}"
		elif [ $LF -eq 0 ]; then
			echo -e "${R}L)${N} ${W}Logcat enabled/disabled${N}"
		fi
	fi

	echo -n "\n[CHOICE]: "
	read -r c
	case $c in
		q|Q)
			if [ $(cat $QC) -eq 0 ]; then
				echo 1 > $QC
			elif [ $(cat $QC) -eq 1 ]; then
				echo 0 > $QC
			fi
		;;
		m|M)
			clear;
			vc=$(cat $VC); convert $vc
			echo -e "${W}Actual voltage charge:${N} ${G}V$val${N}"
			echo ""
			echo -e "${W}1) V3,92 (Long life battery)${N}"
			echo -e "${W}2) V4,16 (middle life battery)${N}"
			if [ -f $DESIGN ]; then
				des=$(cat $DESIGN); convert $des
				echo -e "${W}3) V$val (standard life battery)${N}"
			fi
			echo "b) Back"
			echo -n "\n[CHOICE]: "
			read -r c
			case $c in
				1)
					echo 3920 > $VC
					wait_for 2
					clear
					echo "done"
					sleep 0.5
					clear
					vc=$(cat $VC); convert $vc
					echo -e "${W}Actual voltage charge:${N} ${G}V$val${N}"
				;;
				2)
					echo 4160 > $VC
					wait_for 2
					clear
					echo "done"
					sleep 0.5
					clear
					vc=$(cat $VC); convert $vc
					echo -e "${W}Actual voltage charge:${N} ${G}V$val${N}"
				;;
				3)
					des=$(cat $DESIGN)
					echo $(($des/1000)) > $VC
					wait_for 2
					clear
					echo "done"
					sleep 0.5
					clear
					vc=$(cat $VC); convert $vc
					echo -e "${W}Actual voltage charge:${N} ${G}V$val${N}"
				;;
				b|B)
					exit 1
				;;
				*)
					clear;
					echo "Invalid option, please try again"
					sleep 1
					exit 1
			esac
		;;
		a|A)
			clear;
			echo -e "${W}How much percentage do you want to recharge? (enter only the percentage value without %)${N}"
			echo -n "\n[CHOICE]: "
			read -r c
			amv=$c
			echo ""
			echo "Connect the device to the charger to get started..."
		;;
		l|L)
			if [ $LF = 1 ]; then
				LF=0
			elif [ $LF = 0 ]; then
				LF=1
			fi
		;;
		*)
			clear;
			echo "Invalid option, please try again"
			sleep 1
			exit 1
		;;
	esac
done
