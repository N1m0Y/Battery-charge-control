#!/system/bin/sh

#################################################################################
# nome	 : Battery Charge Control												#
# autore : N1m0Y and @veez21													#
# anno   : 2017-2018															#
# licenza: questo script è software libero: puoi ridistribuirlo e/o modificarlo	#
#          rispettando i termini della licenza GNU General Public licenses		#
#          stabiliti dalla Free Software Foundation, versione 3.				#
#          Questo script è distribuito nella speranza che possa essere utile,	#
#          ma SENZA ALCUNA GARANZIA.											#
#          Consulta la licenza GNU General Public License per avere ulteriori	#
#          dettagli <http://www.gnu.org/licenses/>. 							#
# Credits: @@@@@																#
#################################################################################

#Global variables
QC=/sys/class/power_supply/battery/le_quick_charge_mode
VPH=/sys/class/power_supply/battery/le_vph_voltage
VM=/sys/class/power_supply/battery/voltage_max
VN=/sys/class/power_supply/battery/voltage_now
CN=/sys/class/power_supply/battery/current_now
DESIGN=/sys/class/power_supply/battery/voltage_max_design
Status=/sys/class/power_supply/battery/status
Temp=/sys/class/power_supply/battery/temp
Technology=/sys/class/power_supply/battery/technology
Health=/sys/class/power_supply/battery/health
Capacity=/sys/class/power_supply/battery/capacity
BCE=/sys/class/power_supply/battery/battery_charging_enabled
CE=/sys/class/power_supply/battery/charging_enabled
System_temp_level=/sys/class/power_supply/battery/system_temp_level
System_snc=/sys/class/power_supply/battery/system_snc
LF=1
MV=1
AV=0
T=0

#Internal variables
t=`cat $Temp`
tmin=$t
t_old=$t
tmax=$t
v=`cat $VN`; v=$(($v/10000))
vmin=$v
v_old=$v
vmax=$v
c=`cat $CN`; c=$((($c*-1)/1000))
cmin=$c
c_old=$c
cmax=$c
busybox=/dev/busybox
ver=$($busybox/grep "id=" /magisk/battery-charge-control/module.prop | $busybox/cut -d= -f2)
version=$($busybox/grep "version=" /magisk/battery-charge-control/module.prop | $busybox/cut -d= -f2)

#Detect variables
UNSUPPORTED=false
[ ! -f $Capacity ] && [ ! -f $VM ] && UNSUPPORTED=true

#Activation BCE and CE
if [ `cat $BCE` -eq 0 ] || [ `cat $CE` -eq 0 ]; then
	echo 1 > $BCE; echo 1 > $CE;
fi

# Colors
G='\e[01;32m'
R='\e[01;31m'
N='\e[00;37;40m'
Y='\e[01;33m'
B='\e[01;34m'
V='\e[01;35m'
Bl='\e[01;30m'
C='\e[01;36m'
W='\e[01;37m'

#Functions
convert(){
	#Convert value
	if [ $1 -lt 0 ]; then
		x=$((($1*-1)/1000))
	elif [[ $1 -lt 1000 && $1 -gt 0 ]]; then
		x=$($busybox/awk "BEGIN {printf \"%.2f\n\", $1/10}")
	elif [[ $1 -lt 10000 && $1 -gt 0 ]]; then
		x=$($busybox/awk "BEGIN {printf \"%.2f\n\", $1/1000}")
	elif [ $1 -gt 10000 ]; then
		x=$($busybox/awk "BEGIN {printf \"%.2f\n\", $1/1000000}")
	fi
	val=$x
}

wait_for(){
	i=1
	while [ $i -lt $(($1+1)) ]; do
		clear;
		echo "|"
		sleep 0.20
		clear;
		echo "/"
		sleep 0.20
		clear;
		echo "-"
		sleep 0.20
		clear;
		echo '\'
		sleep 0.20
		clear;
		echo "$i"
		sleep 0.20
		i=$(($i+1))
	done
}

logcat(){
	if [ $LF -eq 1 ]; then
		echo "$1" \ " $2" \ "$3" \ "$4" \ "$( date +'%d-%m-%Y %H:%M:%S' )" | tee -a $LOG_FILE;
	fi
	echo "Battery Charge Control ${ver}: $@" >> /cache/magisk.log
	log -p i -t "Battery Charge Control ${ver}" "$@"
}

# Log file #
LOG_FILE=/sdcard/BCC.log;
Log_old=/sdcard/BCC.old;
if [ -e "$Log_old" ]; then
	rm $Log_old;
fi;
if [ -e "$LOG_FILE" ]; then
	mv $LOG_FILE $Log_old;
	rm $LOG_FILE;
fi;
wait_for 2

logcat "Starting BCC.log" "			    "
echo "BCC_Magisk $version" | tee -a $LOG_FILE;
echo "Ok lets start working";
sleep 2

#
if [ $(cat $Status) = "Charging" ]; then
	clear;
	echo "Unplug the charger and configure BCC!"
else
	while [ $(cat $Status) = "Discharging" ]; do
		clear;
		echo -e "${G}Battery Charge Control${N}"
		echo ""
		echo ""
		if $UNSUPPORTED; then
			echo "Your device is unsupported!"
			echo "You can try changing your kernel/ROM\nthat has the necessary files to be supported."
			sleep 2
			exit 1
		fi

		echo -e "${W}BCC_Magisk $version${N}"
		if [ -f $Status ]; then
			if [ $(cat $Status) = "Discharging" ]; then
				echo -e "${W}Status: $(cat $Status)${N}"
			elif [ $(cat $Status) = "Charging" ]; then
				echo -e "${W}Status:${N} ${R}$(cat $Status)${N}"
			elif [ $(cat $Status) = "Full" ]; then
				echo -e "${W}Status:${N} ${G}$(cat $Status)${N}"
			fi
		fi
		if [ -f $Health ]; then
			echo -e "${W}Health: $(cat $Health)${N}"
		fi
		if [ -f $Technology ]; then
			echo -e "${W}Technology: $(cat $Technology)${N}"
		fi
		des=$(cat $DESIGN); convert $des
		echo -e "${W}Voltage stock:${N} ${G}${val}v${N}"
		vm=$(cat $VM); convert $vm
		echo -e "${W}Voltage max charge:${N} ${G}${val}v${N}"
		echo ""
		echo ""
		if [ -f $QC ]; then
			if [ `cat $QC` -eq 0 ]; then
				echo -e "${W}Q)${N} ${W}QuickCharge enable/disable${N}"
			elif [ `cat $QC` -eq 1 ] && [ `cat $VPH` -eq 0 ]; then
				echo -e "${G}Q)${N} ${W}QuickCharge enable/disable${N}"
			elif [ `cat $QC` -eq 1 ] && [ `cat $VPH` -eq 1 ]; then
				echo -e "${R}Q)${N} ${W}QuickCharge enable/disable${N}"
			fi
		fi
		if [ -f $VM ]; then
			if [ $AV -eq 1 ] && [ $MV -eq 0 ]; then
				echo -e "${R}M)${N} ${W}Manual charging voltage${N}"
				echo -e "${G}A)${N} ${W}Automatic charging voltage${N} ${G}$amc%${N}"
			elif [ $AV -eq 0 ] && [ $MV -eq 1 ]; then
				echo -e "${G}M)${N} ${W}Manual charging voltage${N}"
				echo -e "${R}A)${N} ${W}Automatic charging voltage${N}"
			fi
		fi
		if [ $T -eq 1 ]; then
			echo -e "${G}T)${N} ${W}Ricarica programmata${N}"
		elif [ $T -eq 0 ]; then
			echo -e "${W}T)${N} ${W}Ricarica ritardata${N}"
		fi
		if [ -f $LOG_FILE ]; then
			if [ $LF -eq 1 ]; then
				echo -e "${G}L)${N} ${W}Logcat enabled/disabled${N}"
			elif [ $LF -eq 0 ]; then
				echo -e "${R}L)${N} ${W}Logcat enabled/disabled${N}"
			fi
		fi
		echo "e) Exit"
		echo ""
		echo ""
		echo -n "\n[CHOICE]: "
		unset character
		read -r -s -n1 -t 1 character
		case $character in
			q|Q)
				if [ `cat $QC` -eq 0 ]; then
					echo 1 > $QC;
					logcat "QC=`cat $QC`						 "
				elif [ `cat $QC` -eq 1 ] && [ `cat $VPH` -eq 0 ]; then
					echo 1 > $VPH;
					logcat "VPH=`cat $VPH`						 "
				elif [ `cat $QC` -eq 1 ] && [ `cat $VPH` -eq 1 ]; then
					echo 0 > $QC; echo 0 > $VPH;
					logcat "QC=`cat $QC` - VPH=`cat $VPH`				 "
				fi
			;;
			m|M)
				vm=$(cat $VM); convert $vm
				logcat "Manual voltage: max ${val}v  	 "
				clear;
				echo -e "${W}Actual voltage max:${N} ${G}${val}v${N}"
				echo ""
				echo -e "${W}1) 3,92v${N}"
				echo -e "${W}2) 4,20v${N}"
				echo -e "${W}3) 4,30v${N}"
				if [ -f $DESIGN ]; then
					des=$(cat $DESIGN); convert $des
					echo -e "${W}4) ${val}v${N}"
				fi
				echo -e "${W}5) Custom voltage${N}"
				echo "b) Back"
				echo -n "\n[CHOICE]: "
				read -r character
				case $character in
					1)
						if [ -f $System_temp_level ] && [ $(cat $System_temp_level) -eq 0 ]; then
							echo 1 > $system_temp_level
						fi
						if [ -f $System_snc ] && [ $(cat $System_snc) -eq 0 ]; then
							echo 1 > $System_snc
						fi
						if [ `cat $VM` -ne 3920 ]; then
							echo 3920 > $VM
						fi
						wait_for 2
						clear
						echo "done"
						sleep 0.5
						clear
						vm=$(cat $VM); convert $vm
						echo -e "${W}Actual voltage max:${N} ${G}${val}v${N}"
						logcat "Manual voltage: new ${val}v 	 "
						clear;
						echo -e "${W}How much percentage do you want to recharge? (enter only the percentage value without '%')${N}"
						echo -n "\n[CHOICE]: "
						read -r character
						if [[ $character -gt 0 && $character -lt 101 ]]; then
							amc=$character
						else
							echo "Invalid option, please try again"
							sleep 3
							break
						fi
						echo ""
						echo ""
						echo "BCC is set to recharge the battery by adjusting the most suitable voltage automatically up to $amc%"
						sleep 2
						echo ""
						echo "Connect the charger and press 0 followed by enter to begin (it may take a long time)"
						sleep 2
						MV=1
						AV=0
					;;
					2)
						if [ -f $System_temp_level ] && [ $(cat $System_temp_level) -eq 0 ]; then
							echo 1 > $System_temp_level
						fi
						if [ -f $System_snc ] && [ $(cat $System_snc) -eq 0 ]; then
							echo 1 > $System_snc
						fi
						if [ `cat $VM` -ne 4200 ]; then
							echo 4200 > $VM
						fi
						wait_for 2
						clear
						echo "done"
						sleep 0.5
						clear
						vm=$(cat $VM); convert $vm
						echo -e "${W}Actual voltage max:${N} ${G}${val}v${N}"
						logcat "Manual voltage: new ${val}v 	 "
						clear;
						echo -e "${W}How much percentage do you want to recharge? (enter only the percentage value without '%')${N}"
						echo -n "\n[CHOICE]: "
						read -r character
						if [[ $character -gt 0 && $character -lt 101 ]]; then
							amc=$character
						else
							echo "Invalid option, please try again"
							sleep 3
							break
						fi
						echo ""
						echo ""
						echo "BCC is set to recharge the battery by adjusting the most suitable voltage automatically up to $amc%"
						sleep 2
						echo ""
						echo "Connect the charger and press 0 followed by enter to begin (it may take a long time)"
						sleep 2
						MV=1
						AV=0
					;;
					3)
						if [ -f $System_temp_level ] && [ $(cat $System_temp_level) -eq 0 ]; then
							echo 1 > $System_temp_level
						fi
						if [ -f $System_snc ] && [ $(cat $System_snc) -eq 0 ]; then
							echo 1 > $System_snc
						fi
						if [ `cat $VM` -ne 4300 ]; then
							echo 4300 > $VM
						fi
						wait_for 2
						clear
						echo "done"
						sleep 0.5
						clear
						vm=$(cat $VM); convert $vm
						echo -e "${W}Actual voltage max:${N} ${G}${val}v${N}"
						logcat "Manual voltage: new ${val}v 	 "
						clear;
						echo -e "${W}How much percentage do you want to recharge? (enter only the percentage value without '%')${N}"
						echo -n "\n[CHOICE]: "
						read -r character
						if [[ $character -gt 0 && $character -lt 101 ]]; then
							amc=$character
						else
							echo "Invalid option, please try again"
							sleep 3
							break
						fi
						echo ""
						echo ""
						echo "BCC is set to recharge the battery by adjusting the most suitable voltage automatically up to $amc%"
						sleep 2
						echo ""
						echo "Connect the charger and press 0 followed by enter to begin (it may take a long time)"
						sleep 2
						MV=1
						AV=0
					;;
					4)
						if [ -f $System_temp_level ] && [ $(cat $System_temp_level) -eq 0 ]; then
							echo 1 > $System_temp_level
						fi
						if [ -f $System_snc ] && [ $(cat $System_snc) -eq 0 ]; then
							echo 1 > $System_snc
						fi
						des=$(cat $DESIGN)
						if [ $(($des/1000)) -ne `cat $VM` ]; then
							echo $(($des/1000)) > $VM
						fi
						wait_for 2
						clear
						echo "done"
						sleep 0.5
						clear
						vm=$(cat $VM); convert $vm
						echo -e "${W}Actual voltage max:${N} ${G}${val}v${N}"
						logcat "Manual voltage: new ${val}v 	 "
						clear;
						echo -e "${W}How much percentage do you want to recharge? (enter only the percentage value without '%')${N}"
						echo -n "\n[CHOICE]: "
						read -r character
						if [ $character -gt 0 ] && [ $character -lt 101 ]; then
							amc=$character
						else
							echo "Invalid option, please try again"
							sleep 3
							break
						fi
						echo ""
						echo ""
						echo "BCC is set to recharge the battery by adjusting the most suitable voltage automatically up to $amc%"
						sleep 2
						echo ""
						echo "Connect the charger and press 0 followed by enter to begin (it may take a long time)"
						sleep 2
						MV=1
						AV=0
					;;
					5)
						clear;
						echo -e "${W}Insert the charge voltage in mV without adding the unit of measurement (example 4,18V = 4180mV)${N}"
						echo -e "${W}Accepted values: min=3920 max=4400${N}"
						echo -n "\n[CHOICE]: "
						read -r character
						if [[ $character -gt 3920 && $character -lt 4400 ]]; then
							custom_v=$character
						else
							read
							#echo "Invalid option, please try again"
							#sleep 3
							#break
						fi
						if [ -f $System_temp_level ] && [ $(cat $System_temp_level) -eq 0 ]; then
							echo 1 > $System_temp_level
						fi
						if [ -f $System_snc ] && [ $(cat $System_snc) -eq 0 ]; then
							echo 1 > $System_snc
						fi
						if [ `cat $VM` -ne $custom_v ]; then
							echo "$custom_v" > $VM
						fi
						wait_for 2
						clear
						echo "done"
						sleep 0.5
						clear
						vm=$(cat $VM); convert $vm
						echo -e "${W}Actual voltage max:${N} ${G}${val}v${N}"
						logcat "Manual voltage: new ${val}v 	 "
						clear;
						echo -e "${W}How much percentage do you want to recharge? (enter only the percentage value without '%')${N}"
						echo -n "\n[CHOICE]: "
						read -r character
						if [ $character -gt 0 ] && [ $character -lt 101 ]; then
							amc=$character
						else
							echo "Invalid option, please try again"
							sleep 3
							break
						fi
						echo ""
						echo ""
						echo "BCC is set to recharge the battery by adjusting the most suitable voltage automatically up to $amc%"
						sleep 2
						echo ""
						echo "Connect the charger and press 0 followed by enter to begin (it may take a long time)"
						sleep 2
						MV=1
						AV=0
					;;
					b|B)
						exit 1
					;;
					*)
						clear;
						echo "Invalid option, please try again"
						sleep 1
						exit 1
					;;
				esac
			;;
			a|A)
				clear;
				echo -e "${W}How much percentage do you want to recharge? (enter only the percentage value without '%')${N}"
				echo -n "\n[CHOICE]: "
				read -r character
				if [ $character -gt 0 ] && [ $character -lt 101 ]; then
					amc=$character
				else
					echo "Invalid option, please try again"
					sleep 3
					break
				fi
				echo ""
				echo ""
				echo "BCC is set to recharge the battery by adjusting the most suitable voltage automatically up to $amc%"
				sleep 2
				echo ""
				echo "Connect the charger and press 0 followed by enter to begin (it may take a long time)"
				sleep 2
				AV=1
				MV=0
			;;
			t|T)
				if [ $T -eq 0 ]; then
					clear;
					echo "Choose the charging schedule method"
					echo ""
					echo "t) Time"
					echo "p) Percentage"
					echo -n "\n[CHOICE]: "
					read -r -s -n1 character
					case $character in
						t|T)
							clear
							echo "Sets the start time"
							echo ""
							echo -n "\n[Hour]: "
							read -r hour
							echo ""
							echo -n "\n[Minutes]: "
							read -r minutes
							TR="${hour}${minutes}"
							echo 0 > "$BCE"; echo 0 > "$CE"
							clear
							echo "Connect the charger to the power outlet and connect your device"
							sleep 1
							echo -e "Charging will start at: ${G}${hour}:${minutes}${N}"
							sleep 2
							T=1
						;;
						p|P)
							clear
							echo "Choose which percentage should start charging"
							echo ""
							echo -n "\n[Percentage]: "
							read -r percentage
							echo ""
							P="$percentage"
							echo 0 > "$BCE"; echo 0 > "$CE"
							clear
							echo "Connect the charger to the power outlet and connect your device"
							sleep 1
							echo "Charging will start as the battery drops to ${G}${percentage}%${N}"
							sleep 2
							T=1
						;;
					esac
				else
					T=0
				fi
			;;
			l|L)
				if [ $LF = 1 ]; then
					LF=0
				elif [ $LF = 0 ]; then
					LF=1
				fi
			;;
			e|E)
				exit 1
			;;
		esac
		if [ $T -eq 1 ] && [ $(date +%k%M) -ge $TR ]; then
			echo 1 > $BCE; echo 1 > $CE
		elif [ $T -eq 1 ] && [ `cat $Capacity` -le $P ]; then
			echo 1 > $BCE; echo 1 > $CE
		fi
		if [ `cat $Status` = "Charging" ]; then
			echo "Char." \ "Temp." \ \ \ " Volt" \ \ \ \ \ \ "Cur." \ \ \ \ \ \ "	  Time" | tee -a $LOG_FILE;
		fi
		while [ `cat $Status` = "Charging" ]; do
			if [[ `cat $BCE` -eq 0 || `cat $CE` -eq 0 ]]; then
				echo 1 > $BCE; echo 1 > $CE;
			fi
			clear;
			echo -e "${G}Battery Charge Control${N}"
			echo ""
			echo ""
			echo -e "${W}BCC_Magisk $version${N}"
			if [ -f $Status ]; then
				if [ `cat $Status` = "Discharging" ]; then
					echo -e "${W}Status: `cat $Status`${N}"
				elif [ `cat $Status` = "Charging" ]; then
					echo -e "${W}Status:${N} ${R}`cat $Status`${N}"
				elif [ `cat $Status` = "Full" ]; then
					echo -e "${W}Status:${N} ${G}`cat $Status`${N}"
				fi
			fi
			if [ -f $Health ]; then
				echo -e "${W}Health: `cat $Health`${N}"
			fi
			if [ -f $Technology ]; then
				echo -e "${W}Technology: `cat $Technology`${N}"
			fi
			if [ -f $QC ]; then
				if [ `cat $QC` -eq 0 ]; then
					echo -e "${W}QuickCharge:${N} ${W}disenable${N}"
				elif [ `cat $QC` -eq 1 ] && [ `cat $VPH` -eq 0 ]; then
					echo -e "${W}QuickCharge:${N} ${G}enable${N}"
				elif [ `cat $QC` -eq 1 ] && [ `cat $VPH` -eq 1 ]; then
					echo -e "${W}QuickCharge:${N} ${R}vitamin${N}"
				fi
			fi
			des=`cat $DESIGN`; convert $des
			echo -e "${W}Voltage stock:${N} ${G}${val}v${N}"
			vm=`cat $VM`; convert $vm
			echo -e "${W}Voltage max charge:${N} ${G}${val}v${N}"
			cn=`cat $CN`; convert $cn
			echo -e "${W}Current charge:${N} ${G}$val${N}"
			vn=`cat $VN`; convert $vn
			echo -e "${W}Actual voltage:${N} ${G}${val}v${N}"	
			temp=`cat $Temp`; convert $temp
			echo -e "${W}Temp:${N} ${G}${val}°${N}"
			echo ""
			echo ""
			echo -e "${W}Current capacity${N} ${R}`cat $Capacity`%${N}"
			echo -e "${W}Charging limit${N} ${G}$amc%${N}"
			echo ""
			if [ $AV -eq 1 ] && [ $MV -eq 0 ]; then
				if [ `cat $Capacity` -lt 51 ] && [ `cat $VM` -ne 3920 ]; then
					if [ -f $System_temp_level ] && [ `cat $System_temp_level` -eq 0 ]; then
						echo 1 > $System_temp_level
					fi
					if [ -f $System_snc ] && [ `cat $System_snc` -eq 0 ]; then
						echo 1 > $System_snc
					fi
					echo 3920 > $VM
#					echo 0 > $BCE; echo 0 > $CE; echo 1 > $BCE; echo 1 > $CE;
					logcat "`cat $Capacity` - 3,92v - ${val}°"
				elif [ `cat $Capacity` -ge 51 ] && [ `cat $Capacity` -lt 60 ] && [ `cat $VM` -ne 4000 ]; then
					if [ -f $System_temp_level ] && [ `cat $System_temp_level` -eq 0 ]; then
						echo 1 > $System_temp_level
					fi
					if [ -f $System_snc ] && [ `cat $System_snc` -eq 0 ]; then
						echo 1 > $System_snc
					fi
					echo 4000 > $VM
#					echo 0 > $BCE; echo 0 > $CE; echo 1 > $BCE; echo 1 > $CE;
					logcat "`cat $Capacity` - 4,00v - ${val}°"
				elif [ `cat $Capacity` -ge 60 ] && [ `cat $Capacity` -lt 70 ] && [ `cat $VM` -ne 4080 ]; then
					if [ -f $System_temp_level ] && [ `cat $System_temp_level` -eq 0 ]; then
						echo 1 > $System_temp_level
					fi
					if [ -f $System_snc ] && [ `cat $System_snc` -eq 0 ]; then
						echo 1 > $System_snc
					fi
					echo 4080 > $VM
#					echo 0 > $BCE; echo 0 > $CE; echo 1 > $BCE; echo 1 > $CE;
					logcat "$(cat $Capacity) - 4,08v - ${val}°"
				elif [ $(cat $Capacity) -ge 70 ] && [ $(cat $Capacity) -lt 77 ] && [ $(cat $VM) -ne 4160 ]; then
					if [ -f $System_temp_level ] && [ $(cat $System_temp_level) -eq 0 ]; then
						echo 1 > $System_temp_level
					fi
					if [ -f $System_snc ] && [ $(cat $System_snc) -eq 0 ]; then
						echo 1 > $System_snc
					fi
					echo 4160 > $VM
#					echo 0 > $BCE; echo 0 > $CE; echo 1 > $BCE; echo 1 > $CE;
					logcat "$(cat $Capacity) - 4,16v - ${val}°"
				elif [ $(cat $Capacity) -ge 77 ] && [ $(cat $Capacity) -lt 85 ] && [ $(cat $VM) -ne 4240 ]; then
					if [ -f $System_temp_level ] && [ $(cat $System_temp_level) -eq 0 ]; then
						echo 1 > $System_temp_level
					fi
					if [ -f $System_snc ] && [ $(cat $System_snc) -eq 0 ]; then
						echo 1 > $System_snc
					fi
					echo 4240 > $VM
#					echo 0 > $BCE; echo 0 > $CE; echo 1 > $BCE; echo 1 > $CE;
					logcat "$(cat $Capacity) - 4,24v - ${val}°"
				elif [ $(cat $Capacity) -ge 85 ] && [ $(cat $Capacity) -lt 91 ] && [ $(cat $VM) -ne 4300 ]; then
					if [ -f $System_temp_level ] && [ $(cat $System_temp_level) -eq 0 ]; then
						echo 1 > $System_temp_level
					fi
					if [ -f $System_snc ] && [ $(cat $System_snc) -eq 0 ]; then
						echo 1 > $System_snc
					fi
					echo 4300 > $VM
#					echo 0 > $BCE; echo 0 > $CE; echo 1 > $BCE; echo 1 > $CE;
					logcat "$(cat $Capacity) - 4,30v - ${val}°"
				elif [ $(cat $Capacity) -ge 91 ] && [ $(cat $VM) -ne 4400 ]; then
					if [ -f $System_temp_level ] && [ $(cat $System_temp_level) -eq 0 ]; then
						echo 1 > $System_temp_level
					fi
					if [ -f $System_snc ] && [ $(cat $System_snc) -eq 0 ]; then
						echo 1 > $System_snc
					fi
					echo 4400 > $VM
#					echo 0 > $BCE; echo 0 > $CE; echo 1 > $BCE; echo 1 > $CE;
					logcat "$(cat $Capacity) - 4,40v - ${val}°"
				elif [ $(cat $Capacity) -ge 91 ] && [ $(cat $VM) -ne 4400 ]; then
					if [ -f $System_temp_level ] && [ $(cat $System_temp_level) -eq 0 ]; then
						echo 1 > $System_temp_level
					fi
					if [ -f $System_snc ] && [ $(cat $System_snc) -eq 0 ]; then
						echo 1 > $System_snc
					fi
					echo 4400 > $VM
#					echo 0 > $BCE; echo 0 > $CE; echo 1 > $BCE; echo 1 > $CE;
					logcat "$(cat $Capacity) - 4,40v - ${val}°"
				fi
			fi
			#Temperature control
			t=`cat $Temp`
			if [ "$t" -ne "$t_old" ]; then
				t_old=$t;
				if [ "$t_old" -lt "$tmin" ]; then
					tmin=$t_old; convert $tmin
					logcat "`cat $Capacity`%" " ${val}°-" "			" "		"
				elif [ "$t_old" -gt "$tmax" ]; then
					tmax=$t_old; convert $tmax
					logcat "`cat $Capacity`%" " ${val}°+" "		" "			"
				fi;
			fi;
			#Voltage control
			v=`cat $VN`; v=$(($v / 10000)); #v=$($v | $busybox/cut -f1 -d'.')
			if [ "$v" -ne "$v_old" ]; then
				v_old=$v;
				if [ "$v_old" -lt "$vmin" ]; then
					vmin=$v_old; x=$($busybox/awk "BEGIN {printf \"%.2f\n\", ${vmin}/100}")
					#vmin=$(($v_old / 100));
					logcat "`cat $Capacity`%" "		" "  ${x}v- " "			"
				elif [ "$v_old" -gt "$vmax" ]; then
					vmax=$v_old; x=$($busybox/awk "BEGIN {printf \"%.2f\n\", ${vmax}/100}")
					#vmax=$(($v_old / 100));
					logcat "`cat $Capacity`%" "		" "  ${x}v+ " "			"
				fi;
			fi;
			#Current control
			c=`cat $CN`;
			if [ $c -lt -1000 ]; then
				convert $c; #c=$($c | $busybox/cut -f1 -d',')
				if [ "$val" -ne "$c_old" ]; then
					c_old=$val;
					if [ "$c_old" -lt "$cmin" ]; then
						cmin=$c_old
						#cmin=$(($c_old*1000)); convert $cmin
						if [ $cmin -lt 100 ]; then
							logcat "`cat $Capacity`%" "		" "		" "${cmin}mA-		"
						else
							logcat "`cat $Capacity`%" "		" "		" "${cmin}mA-  	"
						fi
					elif [ "$c_old" -gt "$cmax" ]; then
						cmax=$c_old
						#cmax=$(($c_old*1000)); convert $cmax
						logcat "`cat $Capacity`%" "		" "		" "${cmax}mA+ 	"
					fi;
				fi;
			fi
			if [ $(cat $Capacity) -eq $amc ]; then
				echo ""
				echo ""
				echo -e "${W}Completed!${N}"
				echo 0 > $BCE; echo 0 > $CE;
				temp=`cat $Temp`; convert $temp
				logcat "`cat $Capacity`%" " ${val}°" "	Completed!" "		"
				su -c dumpsys batterystats --reset
				sleep 5
			fi
			sleep 1
		done
	done
fi